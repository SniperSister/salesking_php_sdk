<?php
/**
 * @version     1.0.0
 * @package     SalesKing PHP SDK Tests
 * @license     MIT License; see LICENSE
 * @copyright   Copyright (C) 2012 David Jardin
 * @link        http://www.salesking.eu
 */

require_once (dirname(__FILE__).'/../src/salesking.php');
require_once (dirname(__FILE__).'/../src/object.php');

/**
 * Test class for SaleskingObject.
 * Generated by PHPUnit on 2012-04-23 at 21:46:33.
 */
class SaleskingObjectTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var SaleskingObject
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $api = $this->getMock("Salesking",array(),array(),'',false);

        $api->expects($this->any())
            ->method("request")
            ->will(
                $this->returnCallback(array($this,'getMockRequest'))
        );

        $this->object = new SaleskingObject($api,array("type"=>"client"));
    }

    public function getMockRequest($url,$method="GET",$data=null)
    {
        if($url == "/api/clients/123" AND $method == "GET"){
            $response["code"] = "200";
            $body = new stdClass();
            $body->client = array("organisation" => "salesking","first_name" => "john","id" => 123);
            $response["body"] = $body;
        }

        if($url == "/api/clients/124" AND $method == "GET"){
            $response["code"] = "404";
            $response["body"] = '';
        }

        if($url == "/api/clients/123" AND $method == "DELETE"){
            $response["code"] = "200";
            $response["body"] = true;
        }

        if($url == "/api/clients/124" AND $method == "DELETE"){
            $response["code"] = "404";
            $response["body"] = '';
        }

        if($url == "/api/clients/123" AND $method == "PUT"){
            $response["code"] = "200";
            $body = new stdClass();
            $body->client = array("organisation" => "salesking","first_name" => "john","id" => 123);
            $response["body"] = $body;
        }

        if($url == "/api/clients/124" AND $method == "PUT"){
            $response["code"] = "404";
            $response["body"] = '';
        }

        if($url == "/api/clients" AND $method == "POST"){
            $response["code"] = "201";
            $body = new stdClass();
            $body->client = array("organisation" => "salesking","first_name" => "john","id" => 123);
            $response["body"] = $body;
        }

        return $response;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers SaleskingObject::__set
     */
    public function test__set()
    {
        $this->object->organisation = "salesking";
        $this->assertEquals(
            "salesking",
            $this->object->getData("object")->organisation
        );

        $this->setExpectedException("SaleskingException","invalid property for this object type","SET_INVALIDPROPERTY");
        $this->object->notexisting = "string";
    }

    /**
     * @covers SaleskingObject::validate
     */
    public function testValidate()
    {
        // make sure that not existing properties return false
        $this->assertFalse($this->object->validate("notexisting","string"));

        // test property type integer
        $this->assertFalse($this->object->validate("due_days","string"));
        $this->assertFalse($this->object->validate("due_days",array()));
        $this->assertFalse($this->object->validate("due_days",new stdClass()));
        $this->assertFalse($this->object->validate("due_days",12.2));
        $this->assertTrue($this->object->validate("due_days","12"));
        $this->assertTrue($this->object->validate("due_days",12));

        // test property type number
        $this->assertFalse($this->object->validate("cash_discount","string"));
        $this->assertFalse($this->object->validate("cash_discount",array()));
        $this->assertFalse($this->object->validate("cash_discount",new stdClass()));
        $this->assertTrue($this->object->validate("cash_discount",12.2));
        $this->assertTrue($this->object->validate("cash_discount","12"));
        $this->assertTrue($this->object->validate("cash_discount",12));

        // test property type array
        $this->assertFalse($this->object->validate("addresses","string"));
        $this->assertFalse($this->object->validate("addresses",new stdClass()));
        $this->assertFalse($this->object->validate("addresses",12.2));
        $this->assertFalse($this->object->validate("addresses",12));
        $this->assertTrue($this->object->validate("addresses",array()));

        // test property maxlength
        $this->assertTrue($this->object->validate("tax_number","aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"));
        $this->assertFalse($this->object->validate("tax_number","aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"));

        // test property default values
        $this->assertFalse($this->object->validate("payment_method","string"));
        $this->assertFalse($this->object->validate("payment_method",array()));
        $this->assertTrue($this->object->validate("payment_method",""));
        $this->assertTrue($this->object->validate("payment_method","paypal"));

        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @covers SaleskingObject::__get
     */
    public function test__get()
    {
        $this->object->organisation = "salesking";

        $this->assertEquals(
            "salesking",
            $this->object->organisation
        );
    }

    /**
     * @covers SaleskingObject::__toString
     */
    public function test__toString()
    {
        $this->object->organisation = "salesking";

        $this->assertEquals(
            '{"organisation":"salesking"}',
            (string)$this->object
        );
    }

    /**
     * @covers SaleskingObject::bind
     */
    public function testBind()
    {
        // test bind method with an array
        $data = array(
            "organisation" => "salesking",
            "first_name" => "max",
            "notexisting" => "string",
            "lastname" => "john"
        );

        $this->object->bind($data,array("lastname" => "last_name"));

        $this->assertEquals(
            "salesking",
            $this->object->organisation
        );

        $this->assertEquals(
            "max",
            $this->object->first_name
        );

        $this->assertEquals(
            "john",
            $this->object->last_name
        );

        // test bind method with an object
        $data = new stdClass();
        $data->organisation = "salesking1";
        $data->first_name = "max1";
        $data->notexisting = "string1";
        $data->lastname = "john1";

        $this->object->bind($data,array("lastname" => "last_name"));

        $this->assertEquals(
            "salesking1",
            $this->object->organisation
        );

        $this->assertEquals(
            "max1",
            $this->object->first_name
        );

        $this->assertEquals(
            "john1",
            $this->object->last_name
        );
    }

    /**
     * @covers SaleskingObject::getType
     */
    public function testGetType()
    {
        $this->assertEquals(
            "client",
            $this->object->getType()
        );
    }

    /**
     * @covers SaleskingObject::getData
     */
    public function testGetData()
    {
        $this->object->organisation = "salesking";
        $this->object->last_name = "bush";

        $this->assertEquals(
            array("organisation" => "salesking","last_name" => "bush"),
            $this->object->getData()
        );

        $expected = new stdClass();
        $expected->organisation = "salesking";
        $expected->last_name = "bush";

        $this->assertEquals(
            $expected,
            $this->object->getData("object")
        );

        $this->setExpectedException("SaleskingException","Invalid type","GETDATA_TYPE");
        $this->object->getData("notexisting");
    }

    /**
     * @covers SaleskingObject::save
     */
    public function testSave()
    {
        $this->object->id = "123";
        $this->object->save();
        $this->assertEquals(array("organisation" => "salesking","first_name" => "john","id" => 123),$this->object->getData());

        $this->object->id = "124";
        $this->setExpectedException("SaleskingException","Update failed, an error occured","UPDATE_ERROR");
        $this->object->save();

        $this->object->id = "";
        $this->object->save();
        $this->assertEquals(array("organisation" => "salesking","first_name" => "john","id" => 123),$this->object->getData());
    }

    /**
     * @covers SaleskingObject::load
     */
    public function testLoad()
    {
        $this->object->id = "123";
        $this->object->load();
        $this->assertEquals(array("organisation" => "salesking","first_name" => "john","id" => 123),$this->object->getData());

        $this->object->id = "124";
        $this->setExpectedException("SaleskingException","Fetching failed, an error occured","LOAD_ERROR");
        $this->object->load();

        $this->object->id = "";
        $this->setExpectedException("SaleskingException","could not load object","LOAD_IDNOTSET");
    }

    /**
     * @covers SaleskingObject::delete
     */
    public function testDelete()
    {
        $this->object->id = "123";
        $result = $this->object->delete();
        $this->assertTrue($result["body"]);

        $this->object->id = "124";
        $this->setExpectedException("SaleskingException","Deleting failed, an error occured","DELETE_ERROR");
        $this->object->delete();

        $this->object->id = "";
        $this->setExpectedException("SaleskingException","could not delete object","DELETE_IDNOTSET");
    }

    /**
     * @covers SaleskingObject::getEndpoint
     */
    public function testGetEndpoint()
    {
        $expected = new stdClass();
        $expected->href = "clients/{id}";
        $expected->rel = "self";

        $this->assertEquals(
            $expected,
            $this->object->getEndpoint()
        );

        $this->setExpectedException("SaleskingException","invalid endpoint","ENDPOINT_NOTFOUND");
        $this->object->getEndpoint("notexisting");
    }
}
?>
